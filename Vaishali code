import streamlit as st
import tempfile
from streamlit_chat import message
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.chat_models import ChatOpenAI
from langchain.chains import ConversationalRetrievalChain
from langchain.document_loaders.csv_loader import CSVLoader
from langchain.vectorstores import FAISS
from langchain.document_loaders import UnstructuredWordDocumentLoader
from langchain.document_loaders import DirectoryLoader
from langchain.chains.conversation.memory import ConversationBufferWindowMemory,ConversationBufferMemory
import tempfile
from langchain.text_splitter import RecursiveCharacterTextSplitter
import tiktoken
import os
from langchain.llms import OpenAI
import openai
from dotenv import load_dotenv
load_dotenv()
 

 

# initialise API key.
api_key = os.getenv("OPENAI_API_KEY")
user_api_key = api_key

 

# Upload file .

documents=[]
folder_path="dataset"
loader = DirectoryLoader(folder_path, glob="*.docx", loader_cls=UnstructuredWordDocumentLoader)
documents = loader.load()
documents.extend(loader.load())

# Tokenization.

tokenizer = tiktoken.get_encoding('cl100k_base')
tiktoken.encoding_for_model('gpt-3.5-turbo')
def tiktoken_len(text):
    tokens=tokenizer.encode(
    text,
    disallowed_special=()
    )
    return len(tokens)
token_counts=[tiktoken_len(doc.page_content) for doc in documents]

 

#Chunking data.

text_splitter=RecursiveCharacterTextSplitter(
chunk_size=1000,
chunk_overlap=100,
length_function=len,
separators=['\n\n','\n',' ','']
)       

 

documents=text_splitter.split_documents(documents)

# Vector Embedding.
embeddings = OpenAIEmbeddings()# default text davinchi .1
vectorstore = FAISS.from_documents(documents, embeddings)

 

# Initialise llm.
 
   llm = OpenAI(
       temperature=0.0,
       model_name="gpt-3.5-turbo",
     openai_api_key=user_api_key)

 

 

#Initialise Memory

memory = ConversationBufferWindowMemory(
    llm=llm,
    k=10,
    # output_key='answer',
    memory_key='chat_history',
    return_messages=True)

 

# Initialise retriever
retriever = vectorstore.as_retriever(
    search_type="mmr",
    search_kwargs={"k": 150, "include_metadata": True})

 

# Conversation Retrival Chain.
chain = ConversationalRetrievalChain.from_llm(
    llm=llm,
    memory=memory,
    chain_type="stuff",
    retriever=retriever,
    verbose=True)

 

#Conversation_chat code.

def conversational_chat(query):
        result = chain({"question": query,
        "chat_history": st.session_state['history']})
        st.session_state['history'].append((query, result["answer"]))
        return result["answer"]
##########################
# if 'buffer_memory' not in st.session_state:
#     st.session_state.buffer_memory=ConversationBufferWindowMemory(k=10,return_messages=True)
########################
if 'history' not in st.session_state:
        st.session_state['history'] = []
if 'generated' not in st.session_state:
    st.session_state['generated'] = ["Hello ! Ask me anything from dataset provided"]
if 'past' not in st.session_state:
    st.session_state['past'] = ["How may I help you?"]

#container for the chat history

response_container = st.container()
#container for the user's text input
container = st.container()
with container:
        with st.form(key='my_form', clear_on_submit=True):
            user_input = st.text_input("Query:", placeholder="Talk about your dataset here (:", key='input')
            submit_button = st.form_submit_button(label='Send')
        if submit_button and user_input:
            output = conversational_chat(user_input)
            st.session_state['past'].append(user_input)
            st.session_state['generated'].append(output)
if st.session_state['generated']:
    with response_container:
        for i in range(len(st.session_state['generated'])):
            message(st.session_state["past"][i], is_user=True, key=str(i) + '_user', avatar_style="big-smile")
            message(st.session_state["generated"][i], key=str(i), avatar_style="thumbs")
