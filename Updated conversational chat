import streamlit as st
import os
import tiktoken
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.chat_models import ChatOpenAI
from langchain.chains import ConversationalRetrievalChain
from langchain.document_loaders.csv_loader import CSVLoader
from langchain.vectorstores import FAISS
from langchain.document_loaders import UnstructuredWordDocumentLoader
from langchain.document_loaders import DirectoryLoader
from langchain.chains.conversation.memory import ConversationBufferWindowMemory, ConversationBufferMemory
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.llms import OpenAI

# Load environment variables
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")

# Upload files
documents = []
folder_path = "dataset"
loader = DirectoryLoader(folder_path, glob="*.docx", loader_cls=UnstructuredWordDocumentLoader)
documents = loader.load()
documents.extend(loader.load())

# Tokenization
tokenizer = tiktoken.get_encoding('cl100k_base')
tiktoken.encoding_for_model('gpt-3.5-turbo')

def tiktoken_len(text):
    tokens = tokenizer.encode(
        text,
        disallowed_special=()
    )
    return len(tokens)

token_counts = [tiktoken_len(doc.page_content) for doc in documents]

# Chunking data
text_splitter = RecursiveCharacterTextSplitter(
    chunk_size=1000,
    chunk_overlap=100,
    length_function=len,
    separators=['\n\n', '\n', ' ', '']
)

documents = text_splitter.split_documents(documents)

# Vector Embedding
embeddings = OpenAIEmbeddings()
vectorstore = FAISS.from_documents(documents, embeddings)

# Initialize LLM
llm = OpenAI(
    temperature=0.0,
    model_name="gpt-3.5-turbo",
    openai_api_key=api_key
)

# Initialize Memory
memory = ConversationBufferWindowMemory(
    llm=llm,
    k=10,
    memory_key='chat_history',
    return_messages=True
)

# Initialize retriever
retriever = vectorstore.as_retriever(
    search_type="mmr",
    search_kwargs={"k": 150, "include_metadata": True}
)

# Conversation Retrieval Chain
chain = ConversationalRetrievalChain.from_llm(
    llm=llm,
    memory=memory,
    chain_type="stuff",
    retriever=retriever,
    verbose=True
)

# Conversation chat code
def conversational_chat(query):
    # Append the new query and answer to the history
    st.session_state['history'].append((query, result["answer"]))

    # Pass the entire conversation history to the chain
    conversation_history = [{"role": "system", "content": "system message"}] + \
                          [{"role": "user", "content": q} for q, _ in st.session_state['history']] + \
                          [{"role": "assistant", "content": a} for _, a in st.session_state['history']]

    result = chain({"messages": conversation_history})

    return result["answer"]

# Streamlit app
if 'history' not in st.session_state:
    st.session_state['history'] = []
if 'generated' not in st.session_state:
    st.session_state['generated'] = ["Hello! Ask me anything from the dataset provided"]
if 'past' not in st.session_state:
    st.session_state['past'] = ["How may I help you?"]

# Container for the chat history
response_container = st.container()

# Container for the user's text input
container = st.container()
with container:
    with st.form(key='my_form', clear_on_submit=True):
        user_input = st.text_input("Query:", placeholder="Talk about your dataset here (:")
        submit_button = st.form_submit_button(label='Send')
    if submit_button and user_input:
        output = conversational_chat(user_input)
        st.session_state['past'].append(user_input)
        st.session_state['generated'].append(output)

if st.session_state['generated']:
    with response_container:
        for i in range(len(st.session_state['generated'])):
            st.write(f"User: {st.session_state['past'][i]}")
            st.write(f"ChatGPT: {st.session_state['generated'][i]}")
